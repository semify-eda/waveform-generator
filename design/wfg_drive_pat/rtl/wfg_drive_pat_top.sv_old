`default_nettype none
module wfg_drive_pat_top #
  (
    parameter integer CHANNELS  = 8,
    parameter integer C_pat_AXIS_TDATA_WIDTH  = 32
  )
  (
  input       wire         clk               , // I; System clock
  input       wire         aresetn           , // I; active low reset

  input  wire        wfg_pat_sync_i          , // I; pat_sync pulse
  input  wire[7:0]   wfg_pat_subcycle_cnt_i  , // I; subcycle_cnt
  output wire[CHANNELS-1:0] wfg_drive_pat_dout_o    , // O; output pins
  output wire[CHANNELS-1:0] wfg_drive_pat_dout_en_o , // O; output enabled

  // APB interface signals
  input       wire         psel_i            , // I; APB select
  input       wire         penable_i         , // I; APB enable
  input       wire         pwrite_i          , // I; APB write
  input       wire  [11:0] paddr_i           , // I; APB address
  input       wire  [31:0] pwdata_i          , // I; APB write data
  output      logic        pready_o          , // O; APB ready
  output      logic [31:0] prdata_o          , // O; APB read data
  output      logic        pslverr_o         , // O; APB slave error

  // Axi Stream Slave Bus Interface
  output wire  pat_axis_tready,
  input wire [C_pat_AXIS_TDATA_WIDTH-1 : 0] pat_axis_tdata,
  input wire  pat_axis_tlast,
  input wire  pat_axis_tvalid
);

  // -------------------------------------------------------------------------
  // Definition
  // -------------------------------------------------------------------------
  import wfg_drive_pat_apb_reg_pkg::*;

  logic [1:0] pprivilege_i;
  assign pprivilege_i = 2'b11;

  // APB register signals
  //marker_template_start
  //[% PROCESS template/general.template%]
  //[% PROCESS template/apb.template%] [%
  // SET RegList = data.wfg_reg.data;
  // INCLUDE apb_reg_inst_signal;
  // %]
  //marker_template_code
  // Based on RegList version 0.1 from 23. Aug 2021
  logic         cfg_00_en_q                        ; // CFG_00.EN register output
  logic [  2:1] cfg_00_patsel_q                    ; // CFG_00.PATSEL register output
  logic [ 15:8] cfg_00_begin_q                     ; // CFG_00.BEGIN register output
  logic [23:16] cfg_00_end_q                       ; // CFG_00.END register output
  logic         cfg_01_en_q                        ; // CFG_01.EN register output
  logic [  2:1] cfg_01_patsel_q                    ; // CFG_01.PATSEL register output
  logic [ 15:8] cfg_01_begin_q                     ; // CFG_01.BEGIN register output
  logic [23:16] cfg_01_end_q                       ; // CFG_01.END register output
  logic         cfg_02_en_q                        ; // CFG_02.EN register output
  logic [  2:1] cfg_02_patsel_q                    ; // CFG_02.PATSEL register output
  logic [ 15:8] cfg_02_begin_q                     ; // CFG_02.BEGIN register output
  logic [23:16] cfg_02_end_q                       ; // CFG_02.END register output
  logic         cfg_03_en_q                        ; // CFG_03.EN register output
  logic [  2:1] cfg_03_patsel_q                    ; // CFG_03.PATSEL register output
  logic [ 15:8] cfg_03_begin_q                     ; // CFG_03.BEGIN register output
  logic [23:16] cfg_03_end_q                       ; // CFG_03.END register output
  logic         cfg_04_en_q                        ; // CFG_04.EN register output
  logic [  2:1] cfg_04_patsel_q                    ; // CFG_04.PATSEL register output
  logic [ 15:8] cfg_04_begin_q                     ; // CFG_04.BEGIN register output
  logic [23:16] cfg_04_end_q                       ; // CFG_04.END register output
  logic         cfg_05_en_q                        ; // CFG_05.EN register output
  logic [  2:1] cfg_05_patsel_q                    ; // CFG_05.PATSEL register output
  logic [ 15:8] cfg_05_begin_q                     ; // CFG_05.BEGIN register output
  logic [23:16] cfg_05_end_q                       ; // CFG_05.END register output
  logic         cfg_06_en_q                        ; // CFG_06.EN register output
  logic [  2:1] cfg_06_patsel_q                    ; // CFG_06.PATSEL register output
  logic [ 15:8] cfg_06_begin_q                     ; // CFG_06.BEGIN register output
  logic [23:16] cfg_06_end_q                       ; // CFG_06.END register output
  logic         cfg_07_en_q                        ; // CFG_07.EN register output
  logic [  2:1] cfg_07_patsel_q                    ; // CFG_07.PATSEL register output
  logic [ 15:8] cfg_07_begin_q                     ; // CFG_07.BEGIN register output
  logic [23:16] cfg_07_end_q                       ; // CFG_07.END register output
  logic         test_en_q                          ; // TEST.EN register output
  logic [ 17:0] reginfo_date_d                     ; // REGINFO.DATE register input
  logic [  7:0] id_peripheral_type_d               ; // ID.PERIPHERAL_TYPE register input
  logic [ 15:8] id_version_d                       ; // ID.VERSION register input
//marker_template_end


  logic[CHANNELS-1:0] en_i;
  logic[CHANNELS-1:0][1:0] pat_select_i;
  logic[CHANNELS-1:0][7:0] out_begin_i;
  logic[CHANNELS-1:0][7:0] out_end_i;

  //marker_template_start
  //[% PROCESS template/general.template%]
  //[% PROCESS template/wfg.template%] [%
  // SET RegList = data.wfg_reg.data;
  // INCLUDE wfg_concat_to_multilevel_arrays;
  // %]
  //marker_template_code

  assign en_i = {cfg_07_en_q, cfg_06_en_q, cfg_05_en_q, cfg_04_en_q, cfg_03_en_q, cfg_02_en_q, cfg_01_en_q, cfg_00_en_q};
  assign pat_select_i = {cfg_07_patsel_q, cfg_06_patsel_q, cfg_05_patsel_q, cfg_04_patsel_q, cfg_03_patsel_q, cfg_02_patsel_q, cfg_01_patsel_q, cfg_00_patsel_q};
  assign out_begin_i = {cfg_07_begin_q, cfg_06_begin_q, cfg_05_begin_q, cfg_04_begin_q, cfg_03_begin_q, cfg_02_begin_q, cfg_01_begin_q, cfg_00_begin_q};
  assign out_end_i = {cfg_07_end_q, cfg_06_end_q, cfg_05_end_q, cfg_04_end_q, cfg_03_end_q, cfg_02_end_q, cfg_01_end_q, cfg_00_end_q};
//marker_template_end

  // Based on RegList version 0.1 from 18. Aug 2021
  // -------------------------------------------------------------------------
  // Implementation
  // -------------------------------------------------------------------------

  wfg_drive_pat # (
    .CHANNELS(CHANNELS),
    .AXIS_WIDTH(C_pat_AXIS_TDATA_WIDTH)
  ) wfg_drive_pat_inst (
    .clk                    (clk),
    .rst_n                  (aresetn),
    .pat_sync_i             (wfg_pat_sync_i),
    .pat_subcycle_cnt_i     (wfg_pat_subcycle_cnt_i),
    .en_i                   (en_i),
    .pat_select_i           (pat_select_i),
    .out_begin_i            (out_begin_i),
    .out_end_i              (out_end_i),
    .wfg_drive_pat_tready_o (pat_axis_tready),
    .wfg_drive_pat_tvalid_i (pat_axis_tvalid),
    .wfg_drive_pat_tlast_i  (pat_axis_tlast),
    .wfg_drive_pat_tdata_i  (pat_axis_tdata),
    .pat_dout_o             (wfg_drive_pat_dout_o),
    .pat_dout_en_o          (wfg_drive_pat_dout_en_o)
  );


  wfg_drive_pat_apb_reg apb_reg (
    .clk                       (clk     ) , // System clock
    .aresetn                   (aresetn ) , // active low reset

    //marker_template_start
    //[% PROCESS template/general.template%]
    //[% PROCESS template/apb.template%] [%
    // SET RegList = data.wfg_reg.data;
    // INCLUDE apb_reg_inst_inst;
    // %]
    //marker_template_code
    // Based on RegList version 0.1 from 23. Aug 2021
    .cfg_00_en_q_o                       (cfg_00_en_q                        ), // O; CFG_00.EN register output
    .cfg_00_patsel_q_o                   (cfg_00_patsel_q                    ), // O; CFG_00.PATSEL register output
    .cfg_00_begin_q_o                    (cfg_00_begin_q                     ), // O; CFG_00.BEGIN register output
    .cfg_00_end_q_o                      (cfg_00_end_q                       ), // O; CFG_00.END register output
    .cfg_01_en_q_o                       (cfg_01_en_q                        ), // O; CFG_01.EN register output
    .cfg_01_patsel_q_o                   (cfg_01_patsel_q                    ), // O; CFG_01.PATSEL register output
    .cfg_01_begin_q_o                    (cfg_01_begin_q                     ), // O; CFG_01.BEGIN register output
    .cfg_01_end_q_o                      (cfg_01_end_q                       ), // O; CFG_01.END register output
    .cfg_02_en_q_o                       (cfg_02_en_q                        ), // O; CFG_02.EN register output
    .cfg_02_patsel_q_o                   (cfg_02_patsel_q                    ), // O; CFG_02.PATSEL register output
    .cfg_02_begin_q_o                    (cfg_02_begin_q                     ), // O; CFG_02.BEGIN register output
    .cfg_02_end_q_o                      (cfg_02_end_q                       ), // O; CFG_02.END register output
    .cfg_03_en_q_o                       (cfg_03_en_q                        ), // O; CFG_03.EN register output
    .cfg_03_patsel_q_o                   (cfg_03_patsel_q                    ), // O; CFG_03.PATSEL register output
    .cfg_03_begin_q_o                    (cfg_03_begin_q                     ), // O; CFG_03.BEGIN register output
    .cfg_03_end_q_o                      (cfg_03_end_q                       ), // O; CFG_03.END register output
    .cfg_04_en_q_o                       (cfg_04_en_q                        ), // O; CFG_04.EN register output
    .cfg_04_patsel_q_o                   (cfg_04_patsel_q                    ), // O; CFG_04.PATSEL register output
    .cfg_04_begin_q_o                    (cfg_04_begin_q                     ), // O; CFG_04.BEGIN register output
    .cfg_04_end_q_o                      (cfg_04_end_q                       ), // O; CFG_04.END register output
    .cfg_05_en_q_o                       (cfg_05_en_q                        ), // O; CFG_05.EN register output
    .cfg_05_patsel_q_o                   (cfg_05_patsel_q                    ), // O; CFG_05.PATSEL register output
    .cfg_05_begin_q_o                    (cfg_05_begin_q                     ), // O; CFG_05.BEGIN register output
    .cfg_05_end_q_o                      (cfg_05_end_q                       ), // O; CFG_05.END register output
    .cfg_06_en_q_o                       (cfg_06_en_q                        ), // O; CFG_06.EN register output
    .cfg_06_patsel_q_o                   (cfg_06_patsel_q                    ), // O; CFG_06.PATSEL register output
    .cfg_06_begin_q_o                    (cfg_06_begin_q                     ), // O; CFG_06.BEGIN register output
    .cfg_06_end_q_o                      (cfg_06_end_q                       ), // O; CFG_06.END register output
    .cfg_07_en_q_o                       (cfg_07_en_q                        ), // O; CFG_07.EN register output
    .cfg_07_patsel_q_o                   (cfg_07_patsel_q                    ), // O; CFG_07.PATSEL register output
    .cfg_07_begin_q_o                    (cfg_07_begin_q                     ), // O; CFG_07.BEGIN register output
    .cfg_07_end_q_o                      (cfg_07_end_q                       ), // O; CFG_07.END register output
    .test_en_q_o                         (test_en_q                          ), // O; TEST.EN register output
    .reginfo_date_d_i                    (reginfo_date_d                     ), // I; REGINFO.DATE register input
    .id_peripheral_type_d_i              (id_peripheral_type_d               ), // I; ID.PERIPHERAL_TYPE register input
    .id_version_d_i                      (id_version_d                       ), // I; ID.VERSION register input
//marker_template_end
    // APB interface signals
    .presetn_i                 (aresetn     ), // APB interface domain reset
    .psel_i                    (psel_i      ), // APB select
    .penable_i                 (penable_i   ), // APB enable
    .pwrite_i                  (pwrite_i    ), // APB write
    .paddr_i                   (paddr_i     ), // APB address
    .pwdata_i                  (pwdata_i    ), // APB write data
    .pready_o                  (pready_o    ), // APB ready
    .prdata_o                  (prdata_o    ), // APB read data
    .pslverr_o                 (pslverr_o   ), // APB slave error
    .pprivilege_i              (pprivilege_i) // APB privilege mode 0 - low, 3 - high
  );


  // Register handling --------------------------------------------------------
  // constants
  assign id_peripheral_type_d = ID_PERIPHERAL_TYPE_RESET;
  assign id_version_d         = ID_VERSION_RESET;
  assign reginfo_date_d       = REGINFO_DATE_RESET;

endmodule
`default_nettype wire
